{"/home/travis/build/npmtest/node-npmtest-spacejam/test.js":"/* istanbul instrument in package npmtest_spacejam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spacejam/lib.npmtest_spacejam.js":"/* istanbul instrument in package npmtest_spacejam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_spacejam = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_spacejam = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-spacejam/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-spacejam && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_spacejam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_spacejam\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_spacejam.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_spacejam.rollup.js'] =\n            local.assetsDict['/assets.npmtest_spacejam.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_spacejam.__dirname + '/lib.npmtest_spacejam.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/main.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var npmExports;\n\n  npmExports = {};\n\n  npmExports.Spacejam = require(\"./Spacejam\");\n\n  npmExports.Meteor = require(\"./Meteor\");\n\n  npmExports.Phantomjs = require(\"./Phantomjs\");\n\n  module.exports = npmExports;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/Spacejam.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var EventEmitter, Meteor, Phantomjs, Spacejam, XunitFilePipe, expect, _,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  require('./log');\n\n  expect = require(\"chai\").expect;\n\n  _ = require(\"underscore\");\n\n  EventEmitter = require('events').EventEmitter;\n\n  Meteor = require(\"./Meteor\");\n\n  Phantomjs = require(\"./Phantomjs\");\n\n  XunitFilePipe = require('./XunitFilePipe');\n\n  Spacejam = (function(_super) {\n    var instance;\n\n    __extends(Spacejam, _super);\n\n    instance = null;\n\n    Spacejam.get = function() {\n      return instance != null ? instance : instance = new Spacejam();\n    };\n\n    Spacejam.prototype.defaultOptions = function() {\n      return {\n        'phantomjs-script': 'phantomjs-test-in-console.js',\n        'phantomjs-options': '--load-images=no --ssl-protocol=TLSv1'\n      };\n    };\n\n    Spacejam.prototype.meteor = null;\n\n    Spacejam.prototype.waitForMeteorMongodbKillDone = false;\n\n    Spacejam.prototype.phantomjs = null;\n\n    Spacejam.prototype.doneCode = null;\n\n    Spacejam.prototype.childrenKilled = false;\n\n    Spacejam.DONE = {\n      TEST_SUCCESS: 0,\n      TEST_FAILED: 2,\n      METEOR_ERROR: 3,\n      TEST_TIMEOUT: 4,\n      ALREADY_RUNNING: 5,\n      CLIENT_ERROR: 6\n    };\n\n    Spacejam.DONE_MESSAGE = [\"All tests have passed\", \"Usage error\", \"Some tests have failed\", \"meteor is crashing server side\", \"Total timeout for tests has been reached\", \"spacejam is already running\", \"Unhandled error in meteor client side code\"];\n\n    function Spacejam() {\n      this.onMeteorMongodbKillDone = __bind(this.onMeteorMongodbKillDone, this);\n      log.debug(\"Spacejam.constructor()\");\n    }\n\n    Spacejam.prototype.runTests = function(command, options) {\n      var err;\n      if (options == null) {\n        options = {};\n      }\n      log.debug(\"Spacejam.testPackages()\", options);\n      expect(options).to.be.an(\"object\");\n      expect(command).to.be.a(\"string\");\n      if (options.timeout != null) {\n        expect(options.timeout).to.be.a('number');\n      }\n      if (options['crash-spacejam-after'] != null) {\n        expect(options['crash-spacejam-after']).to.be.a('number');\n      }\n      expect(this.meteor, \"Meteor is already running\").to.be[\"null\"];\n      this.options = _.extend(this.defaultOptions(), options);\n      log.debug(this.options);\n      try {\n        this.meteor = new Meteor();\n        this.phantomjs = new Phantomjs();\n      } catch (_error) {\n        err = _error;\n        console.trace(err);\n        this.emit(\"done\", 1);\n        return;\n      }\n      this.meteor.on(\"exit\", (function(_this) {\n        return function(code) {\n          log.debug(\"Spacejam.meteor.on 'exit':\", arguments);\n          _this.meteor = null;\n          if (code) {\n            return _this.killChildren(Spacejam.DONE.METEOR_ERROR);\n          }\n        };\n      })(this));\n      this.meteor.on(\"mongodb ready\", (function(_this) {\n        return function() {\n          log.info(\"spacejam: meteor mongodb is ready\");\n          _this.waitForMeteorMongodbKillDone = true;\n          return _this.meteor.mongodb.on(\"kill-done\", _this.onMeteorMongodbKillDone);\n        };\n      })(this));\n      this.meteor.on(\"ready\", (function(_this) {\n        return function() {\n          var pipeClass, scriptArgs, spawnOptions;\n          log.info(\"spacejam: meteor is ready\");\n          scriptArgs = '';\n          pipeClass = null;\n          spawnOptions = {};\n          return _this.runPhantom();\n        };\n      })(this));\n      this.meteor.on(\"error\", (function(_this) {\n        return function() {\n          log.error(\"spacejam: meteor has errors\");\n          if (!_this.options.watch) {\n            return _this.killChildren(Spacejam.DONE.METEOR_ERROR);\n          }\n        };\n      })(this));\n      try {\n        this.meteor.runTestCommand(command, this.options);\n      } catch (_error) {\n        err = _error;\n        console.trace(err);\n        this.emit(\"done\", 1);\n        return;\n      }\n      if ((this.options.timeout != null) && +this.options.timeout > 0) {\n        setTimeout((function(_this) {\n          return function() {\n            log.error(\"spacejam: Error: tests timed out after \" + options.timeout + \" milliseconds.\");\n            return _this.killChildren(Spacejam.DONE.TEST_TIMEOUT);\n          };\n        })(this), +options.timeout);\n      }\n      if ((this.options['crash-spacejam-after'] != null) && +this.options['crash-spacejam-after'] > 0) {\n        return setTimeout((function(_this) {\n          return function() {\n            throw new Error(\"Testing spacejam crashing.\");\n          };\n        })(this), +options['crash-spacejam-after']);\n      }\n    };\n\n    Spacejam.prototype.runPhantom = function() {\n      var pipeClass, pipeClassOptions, url;\n      log.debug(\"Spacejam.runPhantom()\");\n      expect(this.phantomjs).to.be.ok;\n      expect(this.meteor.options[\"root-url\"]).to.be.ok;\n      expect(this.options[\"phantomjs-options\"]).to.be.ok;\n      expect(this.options[\"phantomjs-script\"]).to.be.ok;\n      url = this.meteor.options[\"root-url\"];\n      if (this.options['xunit-out'] != null) {\n        url += 'xunit';\n        pipeClass = XunitFilePipe;\n        pipeClassOptions = {\n          pipeToFile: this.options['xunit-out']\n        };\n      } else {\n        url += 'local';\n      }\n      this.phantomjs.on(\"exit\", (function(_this) {\n        return function(code, signal) {\n          var _ref;\n          _this.phantomjs = null;\n          if ((_ref = _this.meteor) != null) {\n            _ref.kill();\n          }\n          if (code != null) {\n            return _this.done(code);\n          }\n        };\n      })(this));\n      return this.phantomjs.run(url, this.options['phantomjs-options'], this.options['phantomjs-script'], pipeClass, pipeClassOptions, this.options['use-system-phantomjs'] != null);\n    };\n\n    Spacejam.prototype.onMeteorMongodbKillDone = function() {\n      log.debug(\"Spacejam.onMeteorMongodbKillDone()\", this.doneCode);\n      return this.emit(\"done\", this.doneCode);\n    };\n\n    Spacejam.prototype.killChildren = function(code) {\n      var _ref, _ref1;\n      if (code == null) {\n        code = 1;\n      }\n      log.debug(\"Spacejam.killChildren()\", arguments);\n      expect(code, \"Invalid exit code\").to.be.a(\"number\");\n      if (!this.childrenKilled) {\n        if ((_ref = this.meteor) != null) {\n          _ref.kill();\n        }\n        if ((_ref1 = this.phantomjs) != null) {\n          _ref1.kill();\n        }\n      }\n      this.childrenKilled = true;\n      return this.done(code);\n    };\n\n    Spacejam.prototype.done = function(code) {\n      var _ref;\n      log.debug(\"Spacejam.done()\", arguments);\n      expect(code, \"Invalid done code\").to.be.a(\"number\");\n      log.debug('Spacejam.done() @meteor?=' + (this.meteor != null));\n      this.waitForMeteorMongodbKillDone = (_ref = this.meteor) != null ? _ref.hasMongodb() : void 0;\n      log.debug('Spacejam.done() @waitForMeteorMongodbKillDone=' + this.waitForMeteorMongodbKillDone);\n      if (!this.waitForMeteorMongodbKillDone) {\n        this.emit(\"done\", code);\n      }\n      log.debug('Spacejam.done() waiting for mongodb to exit before calling done');\n      return this.doneCode = code;\n    };\n\n    return Spacejam;\n\n  })(EventEmitter);\n\n  module.exports = Spacejam;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/log.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var logLevelOpts;\n\n  global.log = require('loglevel');\n\n  logLevelOpts = require(\"rc\")(\"spacejam\", {\n    \"loglevel\": \"info\"\n  });\n\n  log.setLevel(logLevelOpts[\"loglevel\"]);\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/Meteor.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var ChildProcess, EventEmitter, Meteor, MeteorMongodb, expect, fs, glob, path, _,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  require('./log');\n\n  expect = require('chai').expect;\n\n  _ = require(\"underscore\");\n\n  ChildProcess = require('./ChildProcess');\n\n  EventEmitter = require('events').EventEmitter;\n\n  MeteorMongodb = require(\"./MeteorMongodb\");\n\n  glob = require(\"glob\");\n\n  fs = require(\"fs\");\n\n  path = require(\"path\");\n\n  Meteor = (function(_super) {\n    __extends(Meteor, _super);\n\n    function Meteor() {\n      this.hasReadyText = __bind(this.hasReadyText, this);\n      this.hasErrorText = __bind(this.hasErrorText, this);\n      this.hasStartedMongoDBText = __bind(this.hasStartedMongoDBText, this);\n      this.runTestCommand = __bind(this.runTestCommand, this);\n      return Meteor.__super__.constructor.apply(this, arguments);\n    }\n\n    Meteor.prototype.childProcess = null;\n\n    Meteor.prototype.buffer = {\n      stdout: \"\",\n      stderr: \"\"\n    };\n\n    Meteor.prototype.options = null;\n\n    Meteor.prototype.mongodb = null;\n\n    Meteor.prototype.defaultOptions = function() {\n      return {\n        \"dir\": \".\",\n        \"port\": 4096,\n        \"packages\": [],\n        \"driver-package\": \"test-in-console\",\n        \"meteor-ready-text\": \"=> App running at:\",\n        \"meteor-error-text\": \"Waiting for file change.\"\n      };\n    };\n\n    Meteor.getPackageVersion = function() {\n      var _ref;\n      log.debug(\"Meteor.getPackageVersion()\");\n      if (!fs.existsSync('package.js')) {\n        throw new Error(\"Missing package.js in current working directory.\");\n      }\n      require('./PackageJSStubs');\n      require(\"\" + (process.cwd()) + \"/package.js\");\n      expect((_ref = Package.description) != null ? _ref.version : void 0).to.be.a('string').that.is.ok;\n      return Package.description.version;\n    };\n\n    Meteor.prototype.getTestArgs = function(command, options) {\n      var args, packagesToTest;\n      log.debug(\"Meteor.getTestArgs()\", options);\n      expect(+options.port, \"options.port is not a number.\").to.be.ok;\n      expect(options.packages, \"options.packages is not an array of package names\").to.be.an('array');\n      args = [command, '--driver-package', options['driver-package']];\n      if (options.release) {\n        args.push([\"--release\", options.release]);\n      }\n      args.push([\"--port\", options.port]);\n      if (options.settings) {\n        args.push([\"--settings\", options.settings]);\n      }\n      if (options.production) {\n        args.push(\"--production\");\n      }\n      if (options.mocha != null) {\n        options[\"driver-package\"] = \"practicalmeteor:mocha-console-runner\";\n      }\n      if (options[\"root-url\"] == null) {\n        options[\"root-url\"] = \"http://localhost:\" + options.port + \"/\";\n      }\n      if (command === 'test') {\n        if (options[\"test-app-path\"]) {\n          args.push(['--test-app-path'], options[\"test-app-path\"]);\n        }\n        if (options[\"full-app\"]) {\n          args.push(['--full-app']);\n        }\n      } else if (command === 'test-packages') {\n        if (options.packages.length > 0) {\n          packagesToTest = this._globPackages(options.packages);\n          expect(packagesToTest).to.have.length.above(0);\n          args.push(packagesToTest);\n        }\n      }\n      return _.flatten(args);\n    };\n\n    Meteor.prototype.testPackages = function(options) {\n      if (options == null) {\n        options = {};\n      }\n      log.debug(\"Meteor.testPackages()\", arguments);\n      return this.runTestCommand(\"test-packages\", options);\n    };\n\n    Meteor.prototype.testApp = function(options) {\n      if (options == null) {\n        options = {};\n      }\n      log.debug(\"Meteor.testApp()\", arguments);\n      return this.runTestCommand(\"test\", options);\n    };\n\n    Meteor.prototype.runTestCommand = function(command, options) {\n      var args, cwd, env;\n      if (options == null) {\n        options = {};\n      }\n      log.debug(\"Meteor.runTestCommand()\", arguments);\n      expect(options, \"options should be an object.\").to.be.an(\"object\");\n      expect(this.childProcess, \"Meteor's child process is already running\").to.be[\"null\"];\n      this.options = _.extend(this.defaultOptions(), options);\n      log.debug('meteor options:', this.options);\n      cwd = path.resolve(this.options.dir);\n      log.debug(\"meteor cwd=\" + cwd);\n      expect(this.options['driver-package'], \"options.driver-package is missing\").to.be.ok;\n      args = this.getTestArgs(command, this.options);\n      log.debug('meteor args=', args);\n      env = _.clone(process.env);\n      env.METEOR_TEST_PACKAGES = '1';\n      env.ROOT_URL = this.options[\"root-url\"];\n      if (this.options[\"mongo-url\"]) {\n        env.MONGO_URL = this.options[\"mongo-url\"];\n      } else {\n        if (env.MONGO_URL != null) {\n          delete env.MONGO_URL;\n        }\n      }\n      options = {\n        cwd: cwd,\n        env: env,\n        detached: false\n      };\n      this.childProcess = new ChildProcess();\n      this.childProcess.spawn(\"meteor\", args, options);\n      this.childProcess.child.on(\"exit\", (function(_this) {\n        return function(code, signal) {\n          return _this.emit(\"exit\", code, signal);\n        };\n      })(this));\n      this.childProcess.child.stdout.on(\"data\", (function(_this) {\n        return function(data) {\n          _this.buffer.stdout += data;\n          _this.hasStartedMongoDBText(data);\n          _this.hasErrorText(data);\n          return _this.hasReadyText(data);\n        };\n      })(this));\n      return this.childProcess.child.stderr.on(\"data\", (function(_this) {\n        return function(data) {\n          _this.buffer.stderr += data;\n          return _this.hasErrorText(data);\n        };\n      })(this));\n    };\n\n    Meteor.prototype._globPackages = function(packages) {\n      var globOpts, matchedPackages, pkgsFolder;\n      log.debug(\"Meteor._globPackages()\", arguments);\n      expect(packages, \"@packages should be and array\").to.be.an(\"array\");\n      pkgsFolder = process.cwd() + '/packages';\n      globOpts = {\n        cwd: pkgsFolder\n      };\n      matchedPackages = [];\n      packages.forEach((function(_this) {\n        return function(pkgArg) {\n          var globedPackages;\n          if (pkgArg.indexOf(':') > 0) {\n            return matchedPackages.push(pkgArg);\n          } else if (pkgArg.indexOf('/') >= 0) {\n            return matchedPackages.push(pkgArg);\n          } else {\n            globedPackages = glob.sync(pkgArg, globOpts);\n            if (globedPackages.length > 0) {\n              return globedPackages.forEach(function(pkg) {\n                return matchedPackages.push(pkg);\n              });\n            } else {\n              log.warn(\"spacjam: Warning: No packages matching \" + pkgArg + \" have been found. Will add it to the meteor command line anyway, in case it's in PACKAGE_DIRS.\");\n              return matchedPackages.push(pkgArg);\n            }\n          }\n        };\n      })(this));\n      return matchedPackages;\n    };\n\n    Meteor.prototype.hasStartedMongoDBText = function(buffer) {\n      if (buffer.lastIndexOf('Started MongoDB') !== -1) {\n        this.mongodb = new MeteorMongodb(this.childProcess.child.pid);\n        return this.emit(\"mongodb ready\");\n      }\n    };\n\n    Meteor.prototype.hasErrorText = function(buffer) {\n      if (buffer.lastIndexOf(this.defaultOptions()[\"meteor-error-text\"]) !== -1) {\n        return this.emit(\"error\");\n      }\n    };\n\n    Meteor.prototype.hasReadyText = function(buffer) {\n      if (buffer.lastIndexOf(this.defaultOptions()[\"meteor-ready-text\"]) !== -1) {\n        return this.emit(\"ready\");\n      }\n    };\n\n    Meteor.prototype.hasMongodb = function() {\n      log.debug(\"Meteor.hasMongodb()\");\n      if (this.mongodb) {\n        return this.mongodb.hasMongodb();\n      }\n      return false;\n    };\n\n    Meteor.prototype.kill = function(signal) {\n      var _ref, _ref1;\n      if (signal == null) {\n        signal = \"SIGTERM\";\n      }\n      log.debug(\"Meteor.kill()\", arguments, \"@childProcess?=\", this.childProcess != null, \"@mongodb?=\", this.mongodb != null);\n      if ((_ref = this.childProcess) != null) {\n        _ref.kill(signal);\n      }\n      return (_ref1 = this.mongodb) != null ? _ref1.kill() : void 0;\n    };\n\n    return Meteor;\n\n  })(EventEmitter);\n\n  module.exports = Meteor;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/ChildProcess.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var ChildProcess, Pipe, expect, path;\n\n  require('./log');\n\n  expect = require(\"chai\").expect;\n\n  Pipe = require(\"./Pipe\");\n\n  path = require('path');\n\n  ChildProcess = (function() {\n    ChildProcess._spawn = require(\"child_process\").spawn;\n\n    ChildProcess._exec = require(\"child_process\").exec;\n\n    ChildProcess.prototype.child = null;\n\n    ChildProcess.prototype.descendants = [];\n\n    ChildProcess.prototype.pipe = null;\n\n    ChildProcess.prototype.command = null;\n\n    ChildProcess.prototype.killed = false;\n\n    function ChildProcess() {\n      log.debug(\"ChildProcess.constructor()\");\n    }\n\n    ChildProcess.prototype.exec = function(command, options, cb) {\n      var innerCB;\n      log.debug(\"ChildProcess.exec()\", arguments);\n      expect(this.child).to.be[\"null\"];\n      expect(command).to.be.a('string').that.is.ok;\n      if (options != null) {\n        expect(options).to.be.an('object');\n      }\n      this.command = command.split(' ', 1)[0];\n      expect(this.command).to.be.a('string').that.is.ok;\n      innerCB = (function(_this) {\n        return function(err, stdout, stderr) {\n          _this.killed = true;\n          if ((err != null ? err.code : void 0) != null) {\n            log.error(\"child_process.exec: Error: \" + _this.command + \" exit code: \" + err.code);\n          }\n          if ((err != null ? err.signal : void 0) != null) {\n            log.error(\"child_process.exec: Error: \" + _this.command + \" termination signal: \" + err.signal);\n          }\n          if (cb != null) {\n            return cb(err, stdout, stderr);\n          }\n        };\n      })(this);\n      if (options != null) {\n        this.child = ChildProcess._exec(command, options, innerCB);\n      } else {\n        this.child = ChildProcess._exec(command, innerCB);\n      }\n      this.child.stdout.pipe(process.stdout);\n      return this.child.stderr.pipe(process.stderr);\n    };\n\n    ChildProcess.prototype.spawn = function(command, args, options, pipeClass, pipeClassOptions) {\n      if (args == null) {\n        args = [];\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (pipeClass == null) {\n        pipeClass = void 0;\n      }\n      if (pipeClassOptions == null) {\n        pipeClassOptions = void 0;\n      }\n      log.debug(\"ChildProcess.spawn()\", command, args);\n      expect(this.child, \"ChildProcess is already running\").to.be[\"null\"];\n      expect(command, \"Invalid @command argument\").to.be.a(\"string\");\n      expect(args, \"Invalid @args argument\").to.be.an(\"array\");\n      expect(options, \"Invalid @options\").to.be.an(\"object\");\n      if (pipeClass != null) {\n        expect(pipeClass, \"Invalid pipeClass\").to.be.a('function');\n      }\n      if (pipeClassOptions != null) {\n        expect(pipeClassOptions, \"Invalid pipeClassOptions\").to.be.an('object');\n      }\n      this.command = path.basename(command);\n      log.info(\"spacejam: spawning \" + this.command);\n      process.on('exit', (function(_this) {\n        return function(code) {\n          log.debug(\"ChildProcess.process.on 'exit': @command=\" + _this.command + \" @killed=\" + _this.killed + \" code=\" + code);\n          return _this.kill();\n        };\n      })(this));\n      this.child = ChildProcess._spawn(command, args, options);\n      if (pipeClass) {\n        this.pipe = new pipeClass(this.child.stdout, this.child.stderr, pipeClassOptions);\n      } else {\n        this.pipe = new Pipe(this.child.stdout, this.child.stderr);\n      }\n      return this.child.on(\"exit\", (function(_this) {\n        return function(code, signal) {\n          log.debug(\"ChildProcess.process.on 'exit': @command=\" + _this.command + \" @killed=\" + _this.killed + \" code=\" + code + \" signal=\" + signal);\n          _this.killed = true;\n          if (code != null) {\n            return log.info(\"spacejam: \" + command + \" exited with code: \" + code);\n          } else if (signal != null) {\n            return log.info(\"spacejam: \" + command + \" killed with signal: \" + signal);\n          } else {\n            return log.error(\"spacejam: \" + command + \" exited with arguments: \" + arguments);\n          }\n        };\n      })(this));\n    };\n\n    ChildProcess.prototype.kill = function(signal) {\n      var err, _ref;\n      if (signal == null) {\n        signal = \"SIGTERM\";\n      }\n      log.debug(\"ChildProcess.kill() signal=\" + signal + \" @command=\" + this.command + \" @killed=\" + this.killed);\n      if (this.killed) {\n        return;\n      }\n      log.info(\"spacejam: killing\", this.command);\n      this.killed = true;\n      try {\n        return (_ref = this.child) != null ? _ref.kill(signal) : void 0;\n      } catch (_error) {\n        err = _error;\n        return log.warn(\"spacejam: Error: While killing \" + this.command + \" with pid \" + this.child.pid + \":\\n\", err);\n      }\n    };\n\n    return ChildProcess;\n\n  })();\n\n  module.exports = ChildProcess;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/Pipe.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var Pipe;\n\n  Pipe = (function() {\n    function Pipe(stdout, stderr) {\n      this.stdout = stdout;\n      this.stderr = stderr;\n      this.stdout.setEncoding(\"utf8\");\n      this.stderr.setEncoding(\"utf8\");\n      this.stdout.on(\"data\", (function(_this) {\n        return function(data) {\n          return process.stdout.write(data);\n        };\n      })(this));\n      this.stderr.on(\"data\", (function(_this) {\n        return function(data) {\n          return process.stderr.write(data);\n        };\n      })(this));\n    }\n\n    return Pipe;\n\n  })();\n\n  module.exports = Pipe;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/MeteorMongodb.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var EventEmitter, MeteorMongodb, expect, ps,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  expect = require('chai').expect;\n\n  EventEmitter = require('events').EventEmitter;\n\n  ps = require('psext');\n\n  MeteorMongodb = (function(_super) {\n    __extends(MeteorMongodb, _super);\n\n    MeteorMongodb.prototype.mongodChilds = [];\n\n    MeteorMongodb.prototype.killed = false;\n\n    function MeteorMongodb(meteorPid) {\n      this.meteorPid = meteorPid;\n      log.debug(\"MeteorMongodb.constructor()\", arguments);\n      process.on('exit', (function(_this) {\n        return function(code) {\n          log.debug(\"MeteorMongodb.process.on 'exit': code=\" + code);\n          return _this.kill();\n        };\n      })(this));\n      this.findAllChildren();\n    }\n\n    MeteorMongodb.prototype.hasMongodb = function() {\n      log.debug(\"MeteorMongodb.hasMongodb()\");\n      return this.mongodChilds.length > 0;\n    };\n\n    MeteorMongodb.prototype.findAllChildren = function() {\n      log.debug(\"MeteorMongodb.findAllChildren()\", arguments);\n      log.debug(\"@meteorPid\", this.meteorPid);\n      return ps.lookup({\n        command: 'mongod',\n        psargs: '-l',\n        ppid: this.meteorPid\n      }, (function(_this) {\n        return function(err, resultList) {\n          _this.mongodChilds = resultList;\n          if (err) {\n            return log.warn(\"spacjam: Warning: Couldn't find any mongod children:\\n\", err);\n          } else if (resultList.length > 1) {\n            return log.warn(\"spacjam: Warning: Found more than one mongod child:\\n\", resultList);\n          } else {\n            return log.debug(\"Found meteor mongod child with pid: \", resultList[0].pid);\n          }\n        };\n      })(this));\n    };\n\n    MeteorMongodb.prototype.kill = function() {\n      var attempts, interval, onInterval;\n      log.debug(\"MeteorMongodb.kill() killed=\", this.killed);\n      if (this.killed) {\n        return;\n      }\n      this.killed = true;\n      attempts = 1;\n      interval = null;\n      onInterval = (function(_this) {\n        return function() {\n          var allDead, e, mongod, signal, _i, _j, _len, _len1, _ref, _ref1;\n          if (attempts <= 40) {\n            signal = 0;\n            if (attempts === 1) {\n              signal = \"SIGTERM\";\n            } else if (attempts === 20) {\n              signal = \"SIGKILL\";\n            }\n            try {\n              _ref = _this.mongodChilds;\n              for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                mongod = _ref[_i];\n                if (mongod.dead == null) {\n                  try {\n                    process.kill(mongod.pid, signal);\n                  } catch (_error) {\n                    e = _error;\n                    mongod.dead = true;\n                  }\n                }\n              }\n              allDead = true;\n              _ref1 = _this.mongodChilds;\n              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n                mongod = _ref1[_j];\n                if (mongod.dead == null) {\n                  allDead = false;\n                  return;\n                }\n              }\n              if (allDead) {\n                clearInterval(interval);\n                _this.emit(\"kill-done\", null, _this.mongodChilds);\n              }\n            } catch (_error) {}\n            return attempts++;\n          } else {\n            clearInterval(interval);\n            log.error(\"spacejam: Error: Unable to kill all mongodb children, even after 40 attempts\");\n            return _this.emit(\"kill-done\", new Error(\"Unable to kill all mongodb children, even after 40 attempts\"), _this.mongodChilds);\n          }\n        };\n      })(this);\n      onInterval();\n      return interval = setInterval(onInterval, 100);\n    };\n\n    return MeteorMongodb;\n\n  })(EventEmitter);\n\n  module.exports = MeteorMongodb;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/Phantomjs.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var ChildProcess, DEFAULT_PATH, EventEmitter, Phantomjs, expect, path, phantomjs, _,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  _ = require(\"underscore\");\n\n  expect = require('chai').expect;\n\n  ChildProcess = require('./ChildProcess');\n\n  EventEmitter = require('events').EventEmitter;\n\n  path = require('path');\n\n  phantomjs = require('phantomjs-prebuilt');\n\n  DEFAULT_PATH = process.env.PATH;\n\n  Phantomjs = (function(_super) {\n    __extends(Phantomjs, _super);\n\n    function Phantomjs() {\n      this.run = __bind(this.run, this);\n      return Phantomjs.__super__.constructor.apply(this, arguments);\n    }\n\n    Phantomjs.prototype.childProcess = null;\n\n    Phantomjs.prototype.run = function(url, options, script, pipeClass, pipeClassOptions, useSystemPhantomjs) {\n      var env, spawnArgs, spawnOptions;\n      if (options == null) {\n        options = '--load-images=no --ssl-protocol=TLSv1';\n      }\n      if (script == null) {\n        script = \"phantomjs-test-in-console.js\";\n      }\n      if (pipeClass == null) {\n        pipeClass = void 0;\n      }\n      if (pipeClassOptions == null) {\n        pipeClassOptions = void 0;\n      }\n      if (useSystemPhantomjs == null) {\n        useSystemPhantomjs = false;\n      }\n      log.debug(\"Phantomjs.run()\", arguments);\n      expect(this.childProcess, \"ChildProcess is already running\").to.be[\"null\"];\n      expect(url, \"Invalid url\").to.be.a('string');\n      expect(options, \"Invalid options\").to.be.a('string');\n      expect(script, \"Invalid script\").to.be.a('string');\n      if (pipeClass != null) {\n        expect(pipeClass, \"Invalid pipeClass\").to.be.a('function');\n      }\n      if (pipeClassOptions != null) {\n        expect(pipeClassOptions, \"Invalid pipeClassOptions\").to.be.an('object');\n      }\n      expect(useSystemPhantomjs, \"Invalid useSystemPhantomjs\").to.be.a('boolean');\n      env = _.extend(process.env, {\n        ROOT_URL: url\n      });\n      log.debug(\"script=\" + __dirname + \"/\" + script);\n      spawnArgs = options.split(' ');\n      spawnArgs.push(script);\n      log.debug('spawnArgs:', spawnArgs);\n      spawnOptions = {\n        cwd: __dirname,\n        detached: false,\n        env: env\n      };\n      log.debug('spawnOptions:', spawnOptions);\n      if (useSystemPhantomjs) {\n        process.env.PATH = DEFAULT_PATH;\n      } else {\n        process.env.PATH = path.dirname(phantomjs.path) + ':' + DEFAULT_PATH;\n      }\n      this.childProcess = new ChildProcess();\n      this.childProcess.spawn(\"phantomjs\", spawnArgs, spawnOptions, pipeClass, pipeClassOptions);\n      return this.childProcess.child.on(\"exit\", (function(_this) {\n        return function(code, signal) {\n          return _this.emit(\"exit\", code, signal);\n        };\n      })(this));\n    };\n\n    Phantomjs.prototype.kill = function(signal) {\n      var _ref;\n      if (signal == null) {\n        signal = \"SIGTERM\";\n      }\n      log.debug(\"Phantomjs.kill()\");\n      return (_ref = this.childProcess) != null ? _ref.kill(signal) : void 0;\n    };\n\n    return Phantomjs;\n\n  })(EventEmitter);\n\n  module.exports = Phantomjs;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/XunitFilePipe.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var Pipe, XunitFilePipe, fs,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  fs = require('fs');\n\n  Pipe = require(\"./Pipe\");\n\n  XunitFilePipe = (function(_super) {\n    __extends(XunitFilePipe, _super);\n\n    function XunitFilePipe(stdout, stderr, options) {\n      var outputFile, outputStream;\n      this.stdout = stdout;\n      this.stderr = stderr;\n      this.options = options;\n      this.stdout.setEncoding(\"utf8\");\n      this.stderr.setEncoding(\"utf8\");\n      outputFile = this.options.pipeToFile;\n      outputStream = fs.createWriteStream(outputFile, {\n        flags: 'w',\n        encoding: 'utf8'\n      });\n      this.stdoutBuffer = '';\n      this.stdout.on(\"data\", (function(_this) {\n        return function(data) {\n          var line, lines, _i, _len, _results;\n          _this.stdoutBuffer += data;\n          lines = _this.stdoutBuffer.split('\\n');\n          if (lines.length === 1) {\n            return;\n          }\n          _this.stdoutBuffer = lines.pop();\n          _results = [];\n          for (_i = 0, _len = lines.length; _i < _len; _i++) {\n            line = lines[_i];\n            if (line.indexOf('##_meteor_magic##xunit: ') === 0) {\n              _results.push(outputStream.write(line.substr(24) + '\\n'));\n            } else {\n              _results.push(process.stdout.write(line + '\\n'));\n            }\n          }\n          return _results;\n        };\n      })(this));\n      this.stderr.on(\"data\", (function(_this) {\n        return function(data) {\n          return process.stderr.write(data);\n        };\n      })(this));\n    }\n\n    return XunitFilePipe;\n\n  })(Pipe);\n\n  module.exports = XunitFilePipe;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/bin/mongo-reset.js":"var collectionNames = db.getCollectionNames();\nfor(var i = 0, len = collectionNames.length; i < len ; i++){\n    var collectionName = collectionNames[i];\n    if(collectionName != \"system.users\" && collectionName != \"system.indexes\" && db[collectionName]){\n        db[collectionName].drop();\n    }\n}","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/CLI.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var CLI, Meteor, Spacejam, expect, fs, path, _,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  require('./log');\n\n  fs = require(\"fs\");\n\n  path = require(\"path\");\n\n  _ = require(\"underscore\");\n\n  expect = require(\"chai\").expect;\n\n  Spacejam = require('./Spacejam');\n\n  Meteor = require('./Meteor');\n\n  require.extensions['.txt'] = function(module, filename) {\n    return module.exports = fs.readFileSync(filename, 'utf8');\n  };\n\n  CLI = (function() {\n    var instance;\n\n    instance = null;\n\n    CLI.get = function() {\n      return instance != null ? instance : instance = new CLI();\n    };\n\n    CLI.prototype.commands = {\n      \"test\": \"testApp\",\n      \"test-packages\": \"testPackages\"\n    };\n\n    CLI.prototype.options = null;\n\n    CLI.prototype.spacejam = null;\n\n    CLI.prototype.pidPath = null;\n\n    function CLI() {\n      this.onProcessExit = __bind(this.onProcessExit, this);\n      this.spacejam = new Spacejam();\n      log.debug(\"CLI.constructor()\");\n      process.on('SIGPIPE', (function(_this) {\n        return function(code) {\n          var _ref;\n          log.info(\"spacejam: Received a SIGPIPE signal. Killing all child processes...\");\n          return (_ref = _this.spacejam) != null ? _ref.killChildren() : void 0;\n        };\n      })(this));\n    }\n\n    CLI.prototype.onProcessExit = function(code) {\n      var err;\n      log.info(\"spacejam: spacejam is exiting with code \" + code + \", deleting pid file.\");\n      try {\n        return fs.unlinkSync(this.pidPath);\n      } catch (_error) {\n        err = _error;\n        log.trace(err);\n        return log.error(\"spacejam: Error deleting pid file \" + this.pidPath, err);\n      }\n    };\n\n    CLI.prototype.exec = function() {\n      var command, err, version;\n      log.debug(\"CLI.exec()\");\n      expect(this.options, \"You can only call CLI.exec() once\").to.be[\"null\"];\n      this.options = require(\"rc\")(\"spacejam\", {});\n      command = this.options._[0];\n      log.debug(\"command: \" + command);\n      if (command === 'help') {\n        this.printHelp();\n        process.exit(0);\n      } else if (command === 'package-version') {\n        version = Meteor.getPackageVersion();\n        console.log(version);\n        process.exit(0);\n      }\n      if (!_.has(this.commands, command)) {\n        if (command) {\n          log.error(\"spacejam: Error: \\n'\" + command + \"' is not a recognized command\\n\");\n        }\n        return this.printHelp();\n      }\n      this.options.packages = this.options._.slice(1);\n      this.options.command = command;\n      delete this.options._;\n      log.debug(\"CLI.exec() options:\", this.options);\n      this.spacejam.on('done', (function(_this) {\n        return function(code) {\n          var exitMsg;\n          if (Spacejam.DONE_MESSAGE[code] != null) {\n            exitMsg = \"spacejam: \" + Spacejam.DONE_MESSAGE[code] + \". Exiting.\";\n          } else {\n            exitMsg = \"spacejam: Unknown error with exit code '\" + code + \"'. Exiting.\";\n          }\n          log.error(exitMsg);\n          return process.exit(code);\n        };\n      })(this));\n      try {\n        return this.spacejam.runTests(command, this.options);\n      } catch (_error) {\n        err = _error;\n        console.trace(err);\n        log.error(\"spacejam: Usage or initialization error. Exiting.\");\n        return process.exit(1);\n      }\n    };\n\n    CLI.prototype.printHelp = function() {\n      log.debug(\"CLI.printHelp()\");\n      return process.stdout.write(require('../bin/help.txt'));\n    };\n\n    return CLI;\n\n  })();\n\n  module.exports = CLI;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-spacejam/node_modules/spacejam/lib/PackageJSStubs.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  global.Package = {\n    description: null,\n    describe: function(options) {\n      return Package.description = options;\n    },\n    onUse: function(f) {},\n    on_use: function(f) {},\n    onTest: function(f) {},\n    on_test: function(f) {},\n    registerBuildPlugin: function(options) {},\n    _transitional_registerBuildPlugin: function(options) {},\n    includeTool: function() {}\n  };\n\n  global.Npm = {\n    depends: function(_npmDependencies) {},\n    strip: function(discards) {},\n    require: function(name) {}\n  };\n\n  global.Cordova = {\n    depends: function(_cordovaDependencies) {}\n  };\n\n}).call(this);\n"}